library ieee;
use ieee.std_logic_1164.all;

entity IFetch is
	port(	intiate 		:	in		std_logic;
			clk			:	in		std_logic;
			stopFetch	:	in		std_logic;
			nextPC		:	in		std_logic_vector(31 downto 0);
			Instruction	:	out 	std_logic_vector(31 downto 0) );
	end IFetch;

architecture behavior of IFetch is
	component Inst_Memory 
		Generic (RAM_width: intEGER := 32;
					RAM_depth: intEGER := 256 );
		port(
			clk	:	IN		STD_logic;
			Add	:	IN		std_logic_vector(RAM_width-1 downto 0);
			RD		:	OUT	std_logic_vector(RAM_width-1 downto 0));
		end component;
	component PC_Reg
		port(	clk		:	in		std_logic;
				rSet		:	in		std_logic; 
				--writeEnable: in std_logic; @tag:0xfffo --//always write enable with the clk 
				--comint:u can use writeRnable as CacheHit wiring | done the next line @tag:0xBBB
				stopUpdatePC:in	std_logic;	
				nextPC	:	in 	std_logic_vector(31 downto 0);
				PC			:	out 	std_logic_vector(31 downto 0)  );
		end component;
	signal currentPC	:	std_logic_vector(31 downto 0) ;
	begin
		wiring	:	PC_Reg 		port map(clk,intiate,stopFetch,nextPC,currentPC);
		wiring2	:	Inst_Memory port map(clk,currentPC,Instruction);
	end behavior;